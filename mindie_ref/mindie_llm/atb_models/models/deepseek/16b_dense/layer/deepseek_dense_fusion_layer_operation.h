/*
* Copyright (c) Huawei Technologies Co., Ltd. 2023. All rights reserved.
*
*  * Licensed under the Apache License, Version 2.0 (the "License")                                                                                                                                                                                                                                                                                                    ;
*  * you may not use this file except in compliance with the License.
*  * You may obtain a copy of the License at
*  *
*  * http://www.apache.org/licenses/LICENSE-2.0
*  *
*  * Unless required by applicable law or agreed to in writing, software
*  * distributed under the License is distributed on an "AS IS" BASIS,
*  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  * See the License for the specific language governing permissions and
*  * limitations under the License.
*  */
#ifndef ATB_SPEED_MODELS_DEEPSEEK_DENSE_FUSION_LAYER_OPERATION_H
#define ATB_SPEED_MODELS_DEEPSEEK_DENSE_FUSION_LAYER_OPERATION_H
#include <atb/atb_infer.h>
#include <atb/svector.h>
#include "atb_speed/base/hosttensor_binder.h"

namespace atb_speed {
namespace deepseekDense {
enum DeepseekDenseFusionTensorId {
    IN_HIDDENSTATES = 0,
    IN_NORMWEIGHT,
    IN_QKVMIXDWEIGHT,
    IN_SELFOUTLINEARWEIGHT,
    IN_SELFOUTNORMWEIGHT,
    IN_BLOCK_SPARSE_MOE_GATE_WEIGHT,
    IN_MLPGATEUPWEIGHT_EXPERT_ZERO,
    IN_MLPDOWNWEIGHT_EXPERT_ZERO,
    IN_MLPGATEUPWEIGHT_EXPERT_ONE,
    IN_MLPDOWNWEIGHT_EXPERT_ONE,
    IN_MLPGATEUPWEIGHT_EXPERT_TWO,
    IN_MLPDOWNWEIGHT_EXPERT_TWO,
    IN_MLPGATEUPWEIGHT_EXPERT_THREE,
    IN_MLPDOWNWEIGHT_EXPERT_THREE,
    IN_MLPGATEUPWEIGHT_EXPERT_FOUR,
    IN_MLPDOWNWEIGHT_EXPERT_FOUR,
    IN_MLPGATEUPWEIGHT_EXPERT_FIVE,
    IN_MLPDOWNWEIGHT_EXPERT_FIVE,
    IN_MLPGATEUPWEIGHT_EXPERT_SIX,
    IN_MLPDOWNWEIGHT_EXPERT_SIX,
    IN_MLPGATEUPWEIGHT_EXPERT_SEVEN,
    IN_MLPDOWNWEIGHT_EXPERT_SEVEN,
    IN_MLPGATEUPWEIGHT_EXPERT_EIGHT,
    IN_MLPDOWNWEIGHT_EXPERT_EIGHT,
    IN_MLPGATEUPWEIGHT_EXPERT_NINE,
    IN_MLPDOWNWEIGHT_EXPERT_NINE,
    IN_MLPGATEUPWEIGHT_EXPERT_TEN,
    IN_MLPDOWNWEIGHT_EXPERT_TEN,
    IN_MLPGATEUPWEIGHT_EXPERT_ELEVEN,
    IN_MLPDOWNWEIGHT_EXPERT_ELEVEN,
    IN_MLPGATEUPWEIGHT_EXPERT_TWELVE,
    IN_MLPDOWNWEIGHT_EXPERT_TWELVE,
    IN_MLPGATEUPWEIGHT_EXPERT_THIRTEEN,
    IN_MLPDOWNWEIGHT_EXPERT_THIRTEEN,
    IN_MLPGATEUPWEIGHT_EXPERT_FOURTEEN,
    IN_MLPDOWNWEIGHT_EXPERT_FOURTEEN,
    IN_MLPGATEUPWEIGHT_EXPERT_FIFTEENN,
    IN_MLPDOWNWEIGHT_EXPERT_FIFTEEN,
    IN_MLPGATEUPWEIGHT_EXPERT_SIXTEEN,
    IN_MLPDOWNWEIGHT_EXPERT_SIXTEEN,
    IN_MLPGATEUPWEIGHT_EXPERT_SEVENTEEN,
    IN_MLPDOWNWEIGHT_EXPERT_SEVENTEEN,
    IN_MLPGATEUPWEIGHT_EXPERT_EIGHTEEN,
    IN_MLPDOWNWEIGHT_EXPERT_EIGHTEEN,
    IN_MLPGATEUPWEIGHT_EXPERT_NINETEEN,
    IN_MLPDOWNWEIGHT_EXPERT_NINETEEN,
    IN_MLPGATEUPWEIGHT_EXPERT_TWENTY,
    IN_MLPDOWNWEIGHT_EXPERT_TWENTY,
    IN_MLPGATEUPWEIGHT_EXPERT_TWENTY_ONE,
    IN_MLPDOWNWEIGHT_EXPERT_TWENTY_ONE,
    IN_MLPGATEUPWEIGHT_EXPERT_TWENTY_TWO,
    IN_MLPDOWNWEIGHT_EXPERT_TWENTY_TWO,
    IN_MLPGATEUPWEIGHT_EXPERT_TWENTY_THREE,
    IN_MLPDOWNWEIGHT_EXPERT_TWENTY_THREE,
    IN_MLPGATEUPWEIGHT_EXPERT_TWENTY_FOUR,
    IN_MLPDOWNWEIGHT_EXPERT_TWENTY_FOUR,
    IN_MLPGATEUPWEIGHT_EXPERT_TWENTY_FIVE,
    IN_MLPDOWNWEIGHT_EXPERT_TWENTY_FIVE,
    IN_MLPGATEUPWEIGHT_EXPERT_TWENTY_SIX,
    IN_MLPDOWNWEIGHT_EXPERT_TWENTY_SIX,
    IN_MLPGATEUPWEIGHT_EXPERT_TWENTY_SEVEN,
    IN_MLPDOWNWEIGHT_EXPERT_TWENTY_SEVEN,
    IN_MLPGATEUPWEIGHT_EXPERT_TWENTY_EIGHT,
    IN_MLPDOWNWEIGHT_EXPERT_TWENTY_EIGHT,
    IN_MLPGATEUPWEIGHT_EXPERT_TWENTY_NINE,
    IN_MLPDOWNWEIGHT_EXPERT_TWENTY_NINE,
    IN_MLPGATEUPWEIGHT_EXPERT_THIRTY,
    IN_MLPDOWNWEIGHT_EXPERT_THIRTY,
    IN_MLPGATEUPWEIGHT_EXPERT_THIRTY_ONE,
    IN_MLPDOWNWEIGHT_EXPERT_THIRTY_ONE,
    IN_MLPGATEUPWEIGHT_EXPERT_THIRTY_TWO,
    IN_MLPDOWNWEIGHT_EXPERT_THIRTY_TWO,
    IN_MLPGATEUPWEIGHT_EXPERT_THIRTY_THREE,
    IN_MLPDOWNWEIGHT_EXPERT_THIRTY_THREE,
    IN_MLPGATEUPWEIGHT_EXPERT_THIRTY_FOUR,
    IN_MLPDOWNWEIGHT_EXPERT_THIRTY_FOUR,
    IN_MLPGATEUPWEIGHT_EXPERT_THIRTY_FIVE,
    IN_MLPDOWNWEIGHT_EXPERT_THIRTY_FIVE,
    IN_MLPGATEUPWEIGHT_EXPERT_THIRTY_SIX,
    IN_MLPDOWNWEIGHT_EXPERT_THIRTY_SIX,
    IN_MLPGATEUPWEIGHT_EXPERT_THIRTY_SEVEN,
    IN_MLPDOWNWEIGHT_EXPERT_THIRTY_SEVEN,
    IN_MLPGATEUPWEIGHT_EXPERT_THIRTY_EIGHT,
    IN_MLPDOWNWEIGHT_EXPERT_THIRTY_EIGHT,
    IN_MLPGATEUPWEIGHT_EXPERT_THIRTY_NINE,
    IN_MLPDOWNWEIGHT_EXPERT_THIRTY_NINE,
    IN_MLPGATEUPWEIGHT_EXPERT_FOURTY,
    IN_MLPDOWNWEIGHT_EXPERT_FOURTY,
    IN_MLPGATEUPWEIGHT_EXPERT_FOURTY_ONE,
    IN_MLPDOWNWEIGHT_EXPERT_FOURTY_ONE,
    IN_MLPGATEUPWEIGHT_EXPERT_FOURTY_TWO,
    IN_MLPDOWNWEIGHT_EXPERT_FOURTY_TWO,
    IN_MLPGATEUPWEIGHT_EXPERT_FOURTY_THREE,
    IN_MLPDOWNWEIGHT_EXPERT_FOURTY_THREE,
    IN_MLPGATEUPWEIGHT_EXPERT_FOURTY_FOUR,
    IN_MLPDOWNWEIGHT_EXPERT_FOURTY_FOUR,
    IN_MLPGATEUPWEIGHT_EXPERT_FOURTY_FIVE,
    IN_MLPDOWNWEIGHT_EXPERT_FOURTY_FIVE,
    IN_MLPGATEUPWEIGHT_EXPERT_FOURTY_SIX,
    IN_MLPDOWNWEIGHT_EXPERT_FOURTY_SIX,
    IN_MLPGATEUPWEIGHT_EXPERT_FOURTY_SEVEN,
    IN_MLPDOWNWEIGHT_EXPERT_FOURTY_SEVEN,
    IN_MLPGATEUPWEIGHT_EXPERT_FOURTY_EIGHT,
    IN_MLPDOWNWEIGHT_EXPERT_FOURTY_EIGHT,
    IN_MLPGATEUPWEIGHT_EXPERT_FOURTY_NINE,
    IN_MLPDOWNWEIGHT_EXPERT_FOURTY_NINE,
    IN_MLPGATEUPWEIGHT_EXPERT_FIFTY,
    IN_MLPDOWNWEIGHT_EXPERT_FIFTY,
    IN_MLPGATEUPWEIGHT_EXPERT_FIFTY_ONE,
    IN_MLPDOWNWEIGHT_EXPERT_FIFTY_ONE,
    IN_MLPGATEUPWEIGHT_EXPERT_FIFTY_TWO,
    IN_MLPDOWNWEIGHT_EXPERT_FIFTY_TWO,
    IN_MLPGATEUPWEIGHT_EXPERT_FIFTY_THREE,
    IN_MLPDOWNWEIGHT_EXPERT_FIFTY_THREE,
    IN_MLPGATEUPWEIGHT_EXPERT_FIFTY_FOUR,
    IN_MLPDOWNWEIGHT_EXPERT_FIFTY_FOUR,
    IN_MLPGATEUPWEIGHT_EXPERT_FIFTY_FIVE,
    IN_MLPDOWNWEIGHT_EXPERT_FIFTY_FIVE,
    IN_MLPGATEUPWEIGHT_EXPERT_FIFTY_SIX,
    IN_MLPDOWNWEIGHT_EXPERT_FIFTY_SIX,
    IN_MLPGATEUPWEIGHT_EXPERT_FIFTY_SEVEN,
    IN_MLPDOWNWEIGHT_EXPERT_FIFTY_SEVEN,
    IN_MLPGATEUPWEIGHT_EXPERT_FIFTY_EIGHT,
    IN_MLPDOWNWEIGHT_EXPERT_FIFTY_EIGHT,
    IN_MLPGATEUPWEIGHT_EXPERT_FIFTY_NINEE,
    IN_MLPDOWNWEIGHT_EXPERT_FIFTY_NINE,
    IN_MLPGATEUPWEIGHT_EXPERT_SIXTY,
    IN_MLPDOWNWEIGHT_EXPERT_SIXTY,
    IN_MLPGATEUPWEIGHT_EXPERT_SIXTY_ONE,
    IN_MLPDOWNWEIGHT_EXPERT_SIXTY_ONE,
    IN_MLPGATEUPWEIGHT_EXPERT_SIXTY_TWO,
    IN_MLPDOWNWEIGHT_EXPERT_SIXTY_TWO,
    IN_MLPGATEUPWEIGHT_EXPERT_SIXTY_THREE,
    IN_MLPDOWNWEIGHT_EXPERT_SIXTY_THREE,
    IN_MLPGATEUPWEIGHT_SHARED_EXPERT,
    IN_MLPDOWNWEIGHT_EXPERT_SHARED_EXPERT,
    IN_COSTABLE,
    IN_SINTABLE,
    IN_FINAL_HIDDEN_STATE,
    IN_ONE_HOT_ONE,
    IN_ONE_HOT_ZERO,
    IN_ATTENTIONMASK,
    IN_CACHEK,
    IN_CACHEV,
    IN_TOKENOFFSET,
    IN_SEQLEN,
    IN_LAYERID,
    OUT_DEEPSEEK_DENSE_LAYEROUT,
    INTERMIDATE_INPUTNORMOUT,
    INTERMIDATE_MIXEDQ,
    INTERMIDATE_MIXEDK,
    INTERMIDATE_MIXEDV,
    INTERMIDATE_POSITIONEMBEDQ,
    INTERMIDATE_POSITIONEMBEDK,
    INTERMIDATE_SELFOUT,
    INTERMIDATE_SELFLINEAROUT,
    INTERMIDATE_SELFRESIDUALADDOUT,
    INTERMIDATE_SELFNORMOUT,
    INTERMIDATE_MOEOUT,
    INTERMIDATE_HIDDEN_STATE_SHARED_EXPERTS,
    INTERMIDATE_MOEOUT_ALL,
    INTERMIDATE_MOELINEARPARALLELOUT,
};
struct DeepseekDenseLayerFusionParam {
    float rmsNormEps = 0;
    int headNum = 0;
    int dk = 0;
    int rank = 0;
    int rankSize = 1;
    int rankRoot = 0;
    int coderType = 0;
    int isTriMask = 0;
    int kvHeadNum = 0;
    std::string backend = "lccl";
    std::string rankTableFile = "";
    HcclComm hcclComm = nullptr; // only effect when hcclComm is not null
    int layerId = 0;
    int numOfExperts = 64;
    float qkScale = 1;
    int rotaryCoeff = 2;
    bool transpose = true;
    std::vector<int> tokenOffset;
    std::vector<int> seqLen;
};

atb::Status DeepseekDenseLayerFusionOperation(const DeepseekDenseLayerFusionParam &param, atb::Operation **operation);

class DeepseekDenseLayerFusionBinder : public HostTensorBinder {
public:
    DeepseekDenseLayerFusionBinder();
    virtual ~DeepseekDenseLayerFusionBinder();
    void ParseParam(const nlohmann::json &paramJson) override;
    void BindTensor(atb::VariantPack &variantPack) override;

private:
    std::vector<int> tokenOffset_;
    std::vector<int> seqLen_;
    int32_t layerId_ = 0;
};
}
} // namespace atb_speed
#endif
